{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pedro/Documents/GitHub/NLW-4-React-Trail/src/contexts/CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallangesContext } from \"./ChallangesContext\";\nlet countdownTimeout;\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallangesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    console.log(isActive);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/pedro/Documents/GitHub/NLW-4-React-Trail/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallangesContext","countdownTimeout","CountdownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","setTimeout","startCountdown","resetCountdown","clearTimeout","console","log"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,IAAIC,gBAAJ;AAEA,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASO,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAgE;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;AAGAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACvBL,MAAAA,gBAAgB,GAAEe,UAAU,CAAC,MAAM;AAC9BT,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF0B,EAExB,IAFwB,CAA5B;AAGF,KAJD,MAIM,IAAIE,QAAQ,IAAIF,IAAI,KAAI,CAAxB,EAA0B;AAC5BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AACJ,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;;AAYA,WAASW,cAAT,GAA0B;AACtBR,IAAAA,WAAW,CAAC,IAAD,CAAX;AAEH;;AACD,WAASS,cAAT,GAAyB;AACrBC,IAAAA,YAAY,CAAClB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACAD,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH;;AAGD,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BC,MAAAA,OAD8B;AAE9BG,MAAAA,OAF8B;AAG9BL,MAAAA,WAH8B;AAI9BF,MAAAA,QAJ8B;AAK9BS,MAAAA,cAL8B;AAM9BC,MAAAA;AAN8B,KAAlC;AAAA,cAQKd;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { ChallangesContext } from \"./ChallangesContext\";\n\ninterface CountdownContextData {\n    minutes:number,\n    seconds:number,\n    hasFinished:boolean,\n    isActive:boolean,\n    startCountdown:() =>void,\n    resetCountdown: () =>void\n}\n\ninterface CountdownProviderProps {\n    children: ReactNode;\n}\n\nlet countdownTimeout: NodeJS.Timeout;\n\nexport const CountdownContext = createContext({} as CountdownContextData )\n\nexport function CountdownProvider({ children }: CountdownProviderProps){\n    const { startNewChallenge } = useContext(ChallangesContext);\n\n    const [time, setTime] = useState(0.1 * 60);\n    const [isActive, setIsActive] = useState(false);\n    const [hasFinished, setHasFinished] = useState(false);\n\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n    \n\n    useEffect(() => {\n        if (isActive && time > 0) {\n           countdownTimeout= setTimeout(() => {\n                setTime(time - 1);\n            }, 1000)\n        }else if (isActive && time ===0){\n            setHasFinished(true);\n            setIsActive(false);\n            startNewChallenge()\n        }\n    }, [isActive, time])\n\n    function startCountdown() {\n        setIsActive(true);\n\n    }\n    function resetCountdown(){\n        clearTimeout(countdownTimeout);\n        setIsActive(false)\n        console.log(isActive)\n        setTime(0.1 * 60)\n        setHasFinished(false);\n    }\n\n\n    return(\n        <CountdownContext.Provider value={{\n            minutes,\n            seconds,\n            hasFinished,\n            isActive,\n            startCountdown,\n            resetCountdown\n        }}>\n            {children}\n        </CountdownContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}