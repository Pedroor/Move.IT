{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pedro/Documents/GitHub/NLW-4-React-Trail/src/contexts/ChallangesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from \"../../challenges.json\";\nexport var ChallangesContext = /*#__PURE__*/createContext({});\nexport function ChallangesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallangesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallangesProvider, \"EH9kpU4KnW8dz45YSugbIBdFQ48=\");\n\n_c = ChallangesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallangesProvider\");","map":{"version":3,"sources":["/home/pedro/Documents/GitHub/NLW-4-React-Trail/src/contexts/ChallangesContext.tsx"],"names":["createContext","useState","challenges","ChallangesContext","ChallangesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAoBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAkE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAE5CJ,QAAQ,CAAC,CAAD,CAFoC;AAAA,MAE9DK,KAF8D;AAAA,MAExDC,QAFwD;;AAAA,mBAGnBN,QAAQ,CAAC,CAAD,CAHW;AAAA,MAG9DO,iBAH8D;AAAA,MAG3CC,oBAH2C;;AAAA,mBAIfR,QAAQ,CAAC,CAAD,CAJO;AAAA,MAI9DS,mBAJ8D;AAAA,MAIzCC,sBAJyC;;AAAA,mBAMvBV,QAAQ,CAAC,IAAD,CANe;AAAA,MAM9DW,eAN8D;AAAA,MAM7CC,kBAN6C;;AAQrE,WAASC,OAAT,GAAkB;AACdP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASS,iBAAT,GAA4B;AAExB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAE;AACHf,MAAAA,KAAK,EAALA,KADG;AAEHE,MAAAA,iBAAiB,EAAjBA,iBAFG;AAGHE,MAAAA,mBAAmB,EAAnBA,mBAHG;AAIHI,MAAAA,OAAO,EAAPA,OAJG;AAKHC,MAAAA,iBAAiB,EAAjBA,iBALG;AAMHH,MAAAA,eAAe,EAAfA;AANG,KADX;AAAA,cAWKP;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAnCeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\nimport challenges from \"../../challenges.json\"\n\n\ninterface ChallangesProviderProps{\n    children: ReactNode;\n}\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n}\ninterface ChallengesContextData{\n    level: number;\n    currentExperience: number;\n    challengesCompleted: number;\n    activeChallenge: Challenge;\n    levelUp: () => void;\n    startNewChallenge:() => void;\n}\nexport const ChallangesContext = createContext({} as ChallengesContextData)\n\nexport function ChallangesProvider({ children }: ChallangesProviderProps){\n    \n    const [level,setLevel] = useState(1);\n    const [currentExperience, setCurrentExperience] = useState(0);\n    const [challengesCompleted, setChallengesCompleted ] =useState(0);\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n\n    function levelUp(){\n        setLevel(level + 1);\n    }\n\n    function startNewChallenge(){\n        \n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge)\n    }\n\n    return(\n        <ChallangesContext.Provider\n            value={{ \n                level,\n                currentExperience,\n                challengesCompleted,\n                levelUp,\n                startNewChallenge,\n                activeChallenge\n\n                    }}\n                >\n            {children}\n        </ChallangesContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}