{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pedro/Documents/GitHub/NLW-4-React-Trail/src/contexts/ChallangesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from \"../../challenges.json\";\nexport const ChallangesContext = /*#__PURE__*/createContext({});\nexport function ChallangesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallangesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      activeChallenge,\n      levelUp,\n      startNewChallenge,\n      resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/pedro/Documents/GitHub/NLW-4-React-Trail/src/contexts/ChallangesContext.tsx"],"names":["createContext","useState","challenges","ChallangesContext","ChallangesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge","resetChallenge"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAqBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AAErE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAOC;AAAP,MAAmBN,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;;AAEA,WAASa,OAAT,GAAkB;AACdP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASS,iBAAT,GAA4B;AAExB,UAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAAyB;AACrBT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAE;AACHP,MAAAA,KADG;AAEHE,MAAAA,iBAFG;AAGHE,MAAAA,mBAHG;AAIHE,MAAAA,eAJG;AAKHE,MAAAA,OALG;AAMHC,MAAAA,iBANG;AAOHO,MAAAA;AAPG,KADX;AAAA,cAWKjB;AAXL;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\nimport challenges from \"../../challenges.json\"\n\n\ninterface ChallangesProviderProps{\n    children: ReactNode;\n}\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n}\ninterface ChallengesContextData{\n    level: number;\n    currentExperience: number;\n    challengesCompleted: number;\n    activeChallenge: Challenge;\n    levelUp: () => void;\n    startNewChallenge:() => void;\n    resetChallenge: () => void;\n}\nexport const ChallangesContext = createContext({} as ChallengesContextData)\n\nexport function ChallangesProvider({ children }: ChallangesProviderProps){\n    \n    const [level,setLevel] = useState(1);\n    const [currentExperience, setCurrentExperience] = useState(0);\n    const [challengesCompleted, setChallengesCompleted ] =useState(0);\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n\n    function levelUp(){\n        setLevel(level + 1);\n    }\n\n    function startNewChallenge(){\n        \n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge)\n    }\n\n    function resetChallenge(){\n        setActiveChallenge(null);\n    }\n\n    return(\n        <ChallangesContext.Provider\n            value={{ \n                level,\n                currentExperience,\n                challengesCompleted,\n                activeChallenge,\n                levelUp,\n                startNewChallenge,\n                resetChallenge\n                    }}\n                >\n            {children}\n        </ChallangesContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}