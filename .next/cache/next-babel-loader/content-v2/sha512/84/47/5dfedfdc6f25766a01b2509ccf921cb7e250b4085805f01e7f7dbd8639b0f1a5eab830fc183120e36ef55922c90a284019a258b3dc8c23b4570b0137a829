{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pedro/Documents/GitHub/NLW-4-React-Trail/src/contexts/ChallangesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from \"../../challenges.json\";\nexport const ChallangesContext = /*#__PURE__*/createContext({});\nexport function ChallangesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallangesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      activeChallenge,\n      experienceToNextLevel,\n      levelUp,\n      startNewChallenge,\n      resetChallenge,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/pedro/Documents/GitHub/NLW-4-React-Trail/src/contexts/ChallangesContext.tsx"],"names":["createContext","useState","challenges","ChallangesContext","ChallangesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAuBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AAErE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAOC;AAAP,MAAmBN,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAE,CAAR,IAAW,CAApB,EAAsB,CAAtB,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AACdV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASY,iBAAT,GAA4B;AAExB,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAAyB;AACrBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxB,QAAG,CAACb,eAAJ,EAAoB;AAChB;AACH;;AAED,UAAM;AAAEc,MAAAA;AAAF,QAAad,eAAnB;AAEA,QAAIe,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C;;AAEA,QAAIC,eAAe,IAAIb,qBAAvB,EAA6C;AACzCa,MAAAA,eAAe,GAAGA,eAAe,GAACb,qBAAlC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,oBAAoB,CAACkB,eAAD,CAApB;AACAd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAC,CAArB,CAAtB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACI,IAAA,KAAK,EAAE;AACHJ,MAAAA,KADG;AAEHE,MAAAA,iBAFG;AAGHE,MAAAA,mBAHG;AAIHE,MAAAA,eAJG;AAKHE,MAAAA,qBALG;AAMHG,MAAAA,OANG;AAOHC,MAAAA,iBAPG;AAQHM,MAAAA,cARG;AASHC,MAAAA;AATG,KADX;AAAA,cAaKpB;AAbL;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\nimport challenges from \"../../challenges.json\"\n\n\ninterface ChallangesProviderProps{\n    children: ReactNode;\n}\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number;\n}\ninterface ChallengesContextData{\n    level: number;\n    currentExperience: number;\n    challengesCompleted: number;\n    activeChallenge: Challenge;\n    experienceToNextLevel: number;\n    levelUp: () => void;\n    startNewChallenge:() => void;\n    resetChallenge: () => void;\n    completeChallenge: () => void;\n}\nexport const ChallangesContext = createContext({} as ChallengesContextData)\n\nexport function ChallangesProvider({ children }: ChallangesProviderProps){\n    \n    const [level,setLevel] = useState(1);\n    const [currentExperience, setCurrentExperience] = useState(0);\n    const [challengesCompleted, setChallengesCompleted ] =useState(0);\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n\n    const experienceToNextLevel = Math.pow((level +1)*4,2)\n\n    function levelUp(){\n        setLevel(level + 1);\n    }\n\n    function startNewChallenge(){\n        \n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge)\n    }\n\n    function resetChallenge(){\n        setActiveChallenge(null);\n    }\n\n    function completeChallenge(){\n        if(!activeChallenge){\n            return;\n        }\n\n        const { amount } = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if( finalExperience >= experienceToNextLevel){\n            finalExperience = finalExperience-experienceToNextLevel;\n            levelUp();\n        }\n\n        setCurrentExperience(finalExperience);\n        setActiveChallenge(null)\n        setChallengesCompleted(challengesCompleted+1)\n    }\n\n    return(\n        <ChallangesContext.Provider\n            value={{ \n                level,\n                currentExperience,\n                challengesCompleted,\n                activeChallenge,\n                experienceToNextLevel,\n                levelUp,\n                startNewChallenge,\n                resetChallenge,\n                completeChallenge\n                    }}\n                >\n            {children}\n        </ChallangesContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}